
coding_lcd_module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001145  00000000  00000000  000002f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000009c9  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a8  00000000  00000000  00001dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000dc  00000000  00000000  000022a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000295  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000029b  00000000  00000000  00002619  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001fa  000001fa  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002904  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  0000014e  0000014e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_write_command 00000024  00000174  00000174  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init    00000044  0000010a  0000010a  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_data 00000024  00000198  00000198  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.display_text 0000001a  000001d8  000001d8  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.set_cursor 00000008  000001f2  000001f2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000c  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    0000005a  000000b0  000000b0  00000104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.libgcc  0000001c  000001bc  000001bc  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
   8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
   c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  1c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  30:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  3c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  50:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  68:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  70:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
  88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000001fa <__bad_interrupt>:
 1fa:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

0000014e <lcd_strobe_lcd_e>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <xc.h>

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	88 60       	ori	r24, 0x08	; 8
 152:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f ec       	ldi	r24, 0xCF	; 207
 156:	97 e0       	ldi	r25, 0x07	; 7
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_strobe_lcd_e+0xa>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_strobe_lcd_e+0x10>
 15e:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 160:	85 b3       	in	r24, 0x15	; 21
 162:	87 7f       	andi	r24, 0xF7	; 247
 164:	85 bb       	out	0x15, r24	; 21
 166:	8f ec       	ldi	r24, 0xCF	; 207
 168:	97 e0       	ldi	r25, 0x07	; 7
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_strobe_lcd_e+0x1c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_strobe_lcd_e+0x22>
 170:	00 00       	nop
 172:	08 95       	ret

Disassembly of section .text.lcd_write_command:

00000174 <lcd_write_command>:
	_delay_ms(1);			// nodig?
}

void lcd_write_command(unsigned char byte)
{
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 178:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 180:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 184:	c2 95       	swap	r28
 186:	c0 7f       	andi	r28, 0xF0	; 240
 188:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 18a:	85 b3       	in	r24, 0x15	; 21
 18c:	8b 7f       	andi	r24, 0xFB	; 251
 18e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 190:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

Disassembly of section .text.init:

0000010a <init>:

void init() {
 10a:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 110:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 112:	c0 e2       	ldi	r28, 0x20	; 32
 114:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 116:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 11a:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 11c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>
	PORTC = 0x80;
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 124:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 128:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 12a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 12e:	80 ef       	ldi	r24, 0xF0	; 240
 130:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 132:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 136:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 138:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>
	PORTC = 0x60;
 13c:	80 e6       	ldi	r24, 0x60	; 96
 13e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 140:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>
	
	lcd_write_command(0x01);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_write_command>
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000198 <lcd_write_data>:

void lcd_write_data(unsigned char byte) {
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 19c:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1a4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1a8:	c2 95       	swap	r28
 1aa:	c0 7f       	andi	r28, 0xF0	; 240
 1ac:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 1ae:	85 b3       	in	r24, 0x15	; 21
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1b4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_strobe_lcd_e>
}
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

Disassembly of section .text.display_text:

000001d8 <display_text>:

void display_text(char *str) {
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	while(*str) {
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <display_text+0xe>
		lcd_write_data(*str++);
 1e0:	21 96       	adiw	r28, 0x01	; 1
 1e2:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_write_data>
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void display_text(char *str) {
	while(*str) {
 1e6:	88 81       	ld	r24, Y
 1e8:	81 11       	cpse	r24, r1
 1ea:	fa cf       	rjmp	.-12     	; 0x1e0 <display_text+0x8>
		lcd_write_data(*str++);
	}
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

Disassembly of section .text.set_cursor:

000001f2 <set_cursor>:

void set_cursor(int position) {
	
	unsigned char cursor = (position | (1<<7));
	lcd_write_command(cursor);	
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_write_command>
 1f8:	08 95       	ret

Disassembly of section .text.main:

000000b0 <main>:
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	60 97       	sbiw	r28, 0x10	; 16
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 bb       	out	0x14, r24	; 20

	init();
  c8:	0e 94 85 00 	call	0x10a	; 0x10a <init>
		
	char text[] = "Test Text 2";
  cc:	24 ea       	ldi	r18, 0xA4	; 164
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	f9 01       	movw	r30, r18
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	74 2f       	mov	r23, r20
  dc:	0e 94 de 00 	call	0x1bc	; 0x1bc <__movmemx_qi>
	display_text(text);
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <display_text>
	set_cursor(3);
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <set_cursor>
	
	
	char text2[] = "Yoo";
  f0:	89 e5       	ldi	r24, 0x59	; 89
  f2:	9f e6       	ldi	r25, 0x6F	; 111
  f4:	9e 87       	std	Y+14, r25	; 0x0e
  f6:	8d 87       	std	Y+13, r24	; 0x0d
  f8:	8f e6       	ldi	r24, 0x6F	; 111
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	98 8b       	std	Y+16, r25	; 0x10
  fe:	8f 87       	std	Y+15, r24	; 0x0f
	display_text(text2);
 100:	ce 01       	movw	r24, r28
 102:	0d 96       	adiw	r24, 0x0d	; 13
 104:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <display_text>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x58>

Disassembly of section .text.libgcc:

000001bc <__movmemx_qi>:
 1bc:	99 27       	eor	r25, r25

000001be <__movmemx_hi>:
 1be:	77 fd       	sbrc	r23, 7
 1c0:	06 c0       	rjmp	.+12     	; 0x1ce <__movmemx_hi+0x10>
 1c2:	7b bf       	out	0x3b, r23	; 59
 1c4:	07 90       	elpm	r0, Z+
 1c6:	0d 92       	st	X+, r0
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <__movmemx_hi+0x6>
 1cc:	08 95       	ret
 1ce:	01 90       	ld	r0, Z+
 1d0:	0d 92       	st	X+, r0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <__movmemx_hi+0x10>
 1d6:	08 95       	ret
