
coding7segmentsfu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a2  00000216  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bf8  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000866  00000000  00000000  00000e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000296  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d5  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000162  00000162  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       0000001e  00800100  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    00000076  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  10:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  14:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  18:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  1c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  20:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  24:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  28:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  30:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  34:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  38:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  3c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  40:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  44:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  4c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  50:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  54:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  58:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  5c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  60:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  64:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  68:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  6c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  70:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  74:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  7c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  80:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  84:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  88:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 1e       	adc	r0, r17
  90:	00 01       	movw	r0, r0
  92:	84 00       	.word	0x0084	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000180 <__bad_interrupt>:
 180:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

00000162 <wait>:
	unsigned char data;
	unsigned int delay;
} lightEffectStruct; 

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	08 c0       	rjmp	.+16     	; 0x178 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	ef ec       	ldi	r30, 0xCF	; 207
 16a:	f7 e0       	ldi	r31, 0x07	; 7
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <wait+0xa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <wait+0x10>
 172:	00 00       	nop
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	28 17       	cp	r18, r24
 17a:	39 07       	cpc	r19, r25
 17c:	ac f3       	brlt	.-22     	; 0x168 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 17e:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:

int main( void ) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	6e 97       	sbiw	r28, 0x1e	; 30
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
	// Init I/O
	DDRB = 0xFF;			// PORTD(7:4) output, PORTD(3:0) input	
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	87 bb       	out	0x17, r24	; 23

	lightEffectStruct lightEffect[] = {
 104:	8e e1       	ldi	r24, 0x1E	; 30
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	de 01       	movw	r26, r28
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x22>
		{ 0x01, 1000 },
		{ 0x00, 0    }
	};
	
	while (1) {
		int index = 0;
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
		int arraySize = sizeof(lightEffect) / sizeof(lightEffect[0]);
		while (lightEffect[index].delay != 0) {
 11a:	13 c0       	rjmp	.+38     	; 0x142 <main+0x56>
			PORTB = lightEffect[index].data;
 11c:	f8 01       	movw	r30, r16
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e0 0f       	add	r30, r16
 124:	f1 1f       	adc	r31, r17
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	8c 0f       	add	r24, r28
 12c:	9d 1f       	adc	r25, r29
 12e:	e8 0f       	add	r30, r24
 130:	f9 1f       	adc	r31, r25
 132:	80 81       	ld	r24, Z
 134:	88 bb       	out	0x18, r24	; 24
			wait(lightEffect[index].delay);
 136:	81 81       	ldd	r24, Z+1	; 0x01
 138:	92 81       	ldd	r25, Z+2	; 0x02
 13a:	0e 94 b1 00 	call	0x162	; 0x162 <wait>
			index++ % arraySize - 1;
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	
	while (1) {
		int index = 0;
		int arraySize = sizeof(lightEffect) / sizeof(lightEffect[0]);
		while (lightEffect[index].delay != 0) {
 142:	f8 01       	movw	r30, r16
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e0 0f       	add	r30, r16
 14a:	f1 1f       	adc	r31, r17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	8c 0f       	add	r24, r28
 152:	9d 1f       	adc	r25, r29
 154:	e8 0f       	add	r30, r24
 156:	f9 1f       	adc	r31, r25
 158:	81 81       	ldd	r24, Z+1	; 0x01
 15a:	92 81       	ldd	r25, Z+2	; 0x02
 15c:	89 2b       	or	r24, r25
 15e:	f1 f6       	brne	.-68     	; 0x11c <main+0x30>
 160:	da cf       	rjmp	.-76     	; 0x116 <main+0x2a>
