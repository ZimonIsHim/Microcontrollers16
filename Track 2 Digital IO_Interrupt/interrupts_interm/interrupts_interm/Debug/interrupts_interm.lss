
interrupts_interm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001da  0000024e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b7f  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000082a  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c2  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000164  00000000  00000000  00001c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001d4  000001d4  00000248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_2 00000064  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_3 00000064  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000020  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.index   00000002  00800100  000001d8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <_etext>
   c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_3>
  10:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  14:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  18:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  1c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  20:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  24:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  28:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  2c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  30:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  34:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  38:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  3c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  40:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  44:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  48:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  4c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  50:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  54:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  58:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  5c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  60:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  64:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  68:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  6c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  70:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  74:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  78:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  7c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  80:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  84:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>
  88:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	00 01       	movw	r0, r0
  92:	d8 00       	.word	0x00d8	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

000001d4 <__bad_interrupt>:
 1d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

000000ec <__vector_2>:
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

ISR( INT1_vect ) {
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
    PORTC = SOLETURNON(index-- % 8);
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10a:	9c 01       	movw	r18, r24
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	31 09       	sbc	r19, r1
 110:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	87 70       	andi	r24, 0x07	; 7
 11a:	90 78       	andi	r25, 0x80	; 128
 11c:	99 23       	and	r25, r25
 11e:	24 f4       	brge	.+8      	; 0x128 <__vector_2+0x3c>
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	88 6f       	ori	r24, 0xF8	; 248
 124:	9f 6f       	ori	r25, 0xFF	; 255
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	a9 01       	movw	r20, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__vector_2+0x48>
 130:	44 0f       	add	r20, r20
 132:	55 1f       	adc	r21, r21
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <__vector_2+0x44>
 138:	45 bb       	out	0x15, r20	; 21
}
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

Disassembly of section .text.__vector_3:

00000150 <__vector_3>:

ISR( INT2_vect ) {
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	PORTC = SOLETURNON(index++ % 8);	
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	9c 01       	movw	r18, r24
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	87 70       	andi	r24, 0x07	; 7
 17e:	90 78       	andi	r25, 0x80	; 128
 180:	99 23       	and	r25, r25
 182:	24 f4       	brge	.+8      	; 0x18c <__vector_3+0x3c>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	88 6f       	ori	r24, 0xF8	; 248
 188:	9f 6f       	ori	r25, 0xFF	; 255
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	a9 01       	movw	r20, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <__vector_3+0x48>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <__vector_3+0x44>
 19c:	45 bb       	out	0x15, r20	; 21
}
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

Disassembly of section .text.main:

000001b4 <main>:

int main( void ) {
	// Init I/O
	DDRC = 0xFF;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xF0;			// PORTD(7:4) output, PORTD(3:0) input	
 1b8:	80 ef       	ldi	r24, 0xF0	; 240
 1ba:	81 bb       	out	0x11, r24	; 17

	// Init Interrupt hardware
	EICRA |= 0x3C;			// INT1 falling edge, INT0 rising edge
 1bc:	ea e6       	ldi	r30, 0x6A	; 106
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8c 63       	ori	r24, 0x3C	; 60
 1c4:	80 83       	st	Z, r24
	EIMSK |= 0x06;			// Enable INT1 & INT2
 1c6:	89 b7       	in	r24, 0x39	; 57
 1c8:	86 60       	ori	r24, 0x06	; 6
 1ca:	89 bf       	out	0x39, r24	; 57
	
	// Init.
	sei();	// Enable global interrupt system.
 1cc:	78 94       	sei

	PORTC = 0b00000001;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x1e>
